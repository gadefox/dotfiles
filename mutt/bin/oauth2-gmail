#!/usr/bin/env python3
#
# Mutt OAuth2 token management script, version 2020-08-07
# Written against python 3.7.3, not tried with earlier python versions.
#
#   Copyright (C) 2020 Alexander Perlis
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License as
#   published by the Free Software Foundation; either version 2 of the
#   License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
#   02110-1301, USA.
'''Mutt OAuth2 token management'''

import os
import sys
import json
import argparse
import urllib.parse
import urllib.request
import imaplib
import poplib
import smtplib
import base64
import secrets
import hashlib
import time
from datetime import timedelta, datetime
from pathlib import Path
import socket
import http.server
import subprocess

registration = {
    'token_endpoint': 'https://accounts.google.com/o/oauth2/token',
    'client_secret': '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',
}

ap = argparse.ArgumentParser(epilog='''
This script obtains and prints a valid OAuth2 access token.  State is maintained in an
encrypted TOKENFILE.  Run with "--verbose --authorize" to get started or whenever all
tokens have expired.  To truly start over from scratch, first delete TOKENFILE.
''')
ap.add_argument('-a', '--authorize', action='store_true', help='manually authorize new tokens')
ap.add_argument('-v', '--verbose', action='store_true', help='increase verbosity')
ap.add_argument('user', help='gmail user name')
args = ap.parse_args()

token = {}
token['email'] = args.user + '@gmail.com'

tokenfile = os.path.expanduser('~') + '/.gnupg/' + token['email'] + '.token'
if args.verbose:
    print('Tokenfile:', tokenfile)

path = Path(tokenfile)
if path.exists():
    if 0o777 & path.stat().st_mode != 0o600:
        sys.exit('Token file has unsafe mode. Suggest deleting and starting over.')
    try:
        sub = subprocess.run(['gpg', '--decrypt'], check=True, input=path.read_bytes(), capture_output=True)
        token = json.loads(sub.stdout)
        if args.verbose:
            print('Obtained from token file:', json.dumps(token))
    except subprocess.CalledProcessError:
        sys.exit('Difficulty decrypting token file. Is your decryption agent primed for '
                 'non-interactive usage, or an appropriate environment variable such as '
                 'GPG_TTY set to allow interactive agent usage from inside a pipe?')


def writetokenfile():
    '''Writes global token dictionary into token file.'''
    if not path.exists():
        path.touch(mode=0o600)
    if 0o777 & path.stat().st_mode != 0o600:
        sys.exit('Token file has unsafe mode. Suggest deleting and starting over.')
    sub2 = subprocess.run(['gpg', '--encrypt', '--recipient', '0D269DCFA58EA395'], check=True, input=json.dumps(token).encode(), capture_output=True)
    path.write_bytes(sub2.stdout)


if len(token) == 1:
    if not args.authorize:
        sys.exit('You must run script with "--authorize" at least once.')
    token['access_token'] = ''
    token['access_token_expiration'] = ''
    token['refresh_token'] = ''
    writetokenfile()

baseparams = {'client_id': '1039732635046-9mcurh26g6bq6h5ud914unm21p7vfe77.apps.googleusercontent.com'}


def access_token_valid():
    '''Returns True when stored access token exists and is still valid at this time.'''
    token_exp = token['access_token_expiration']
    return token_exp and datetime.now() < datetime.fromisoformat(token_exp)


def update_tokens(r):
    '''Takes a response dictionary, extracts tokens out of it, and updates token file.'''
    token['access_token'] = r['access_token']
    token['access_token_expiration'] = (datetime.now() + timedelta(seconds=int(r['expires_in']))).isoformat()
    if 'refresh_token' in r:
        token['refresh_token'] = r['refresh_token']
    writetokenfile()
    if args.verbose:
        print(f'NOTICE: Obtained new access token, expires {token["access_token_expiration"]}.')


if args.authorize:
    p = baseparams.copy()
    p['scope'] = 'https://mail.google.com/'

    verifier = secrets.token_urlsafe(90)
    challenge = base64.urlsafe_b64encode(hashlib.sha256(verifier.encode()).digest())[:-1]
    redirect_uri = 'urn:ietf:wg:oauth:2.0:oob'
    listen_port = 0
    p.update({'login_hint': token['email'],
              'response_type': 'code',
              'redirect_uri': redirect_uri,
              'code_challenge': challenge,
              'code_challenge_method': 'S256'})
    print('https://accounts.google.com/o/oauth2/auth?' + urllib.parse.urlencode(p, quote_via=urllib.parse.quote))
    authcode = input('Visit displayed URL to retrieve authorization code. Enter code from server (might be in browser address bar): ')
    if not authcode:
        sys.exit('Did not obtain an authcode.')

    for k in 'response_type', 'login_hint', 'code_challenge', 'code_challenge_method':
        del p[k]
    p.update({'grant_type': 'authorization_code',
              'code': authcode,
              'client_secret': registration['client_secret'],
              'code_verifier': verifier})
    print('Exchanging the authorization code for an access token')

    try:
        response = urllib.request.urlopen(registration['token_endpoint'], urllib.parse.urlencode(p).encode())
    except urllib.error.HTTPError as err:
        print(err.code, err.reason)
        response = err
    response = response.read()
    if args.verbose:
        print(response)
    response = json.loads(response)
    if 'error' in response:
        print(response['error'])
        if 'error_description' in response:
            print(response['error_description'])
        sys.exit(1)

    update_tokens(response)

if not access_token_valid():
    if args.verbose:
        print('NOTICE: Invalid or expired access token; using refresh token to obtain new access token.')
    if not token['refresh_token']:
        sys.exit('ERROR: No refresh token. Run script with "--authorize".')
    p = baseparams.copy()
    p.update({'client_secret': registration['client_secret'],
              'refresh_token': token['refresh_token'],
              'grant_type': 'refresh_token'})
    try:
        response = urllib.request.urlopen(registration['token_endpoint'], urllib.parse.urlencode(p).encode())
    except urllib.error.HTTPError as err:
        print(err.code, err.reason)
        response = err
    response = response.read()
    if args.verbose:
        print(response)
    response = json.loads(response)
    if 'error' in response:
        print(response['error'])
        if 'error_description' in response:
            print(response['error_description'])
        print('Perhaps refresh token invalid. Try running once with "--authorize"')
        sys.exit(1)
    update_tokens(response)


if not access_token_valid():
    sys.exit('ERROR: No valid access token. This should not be able to happen.')

if args.verbose:
    print('Access Token: ', end='')
print(token['access_token'])
